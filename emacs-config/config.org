* basic
#+BEGIN_SRC emacs-lisp :tangle yes
  (set-language-environment "UTF-8")
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (setq inhibit-startup-message t)
  (setq inhibit-startup-screen t)
  (setq make-backup-files nil)
  (setq visible-bell t)
  (defalias 'yes-or-no-p 'y-or-n-p)
  (global-set-key (kbd "<f6>") 'revert-buffer)
  (use-package zenburn-theme
    :config
    (load-theme 'zenburn t))
#+END_SRC
* editors
#+BEGIN_SRC emacs-lisp :tangle yes 
  (use-package which-key
    :config
    (which-key-mode 1))
  (use-package cnfonts
    :config
    (cnfonts-enable))

  (use-package expand-region
    :config
    (global-set-key (kbd "C-=") 'er/expand-region))
#+END_SRC
* evil
#+BEGIN_SRC emacs-lisp :tangle yes 
  (use-package evil
    :config
    (evil-mode t))

  (use-package evil-commentary
    :config
    (evil-commentary-mode))
#+END_SRC
* ivy
#+BEGIN_SRC emacs-lisp :tangle yes 
  (use-package ivy
    :ensure swiper
    :ensure counsel
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    (global-set-key "\C-s" 'swiper)
    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
    (global-set-key (kbd "C-x C-r") 'counsel-recentf)
    (global-set-key (kbd "C-x b") 'counsel-switch-buffer)
    (global-set-key (kbd "C-x C-b") 'counsel-bookmark)
    )
#+END_SRC
* programming
#+BEGIN_SRC emacs-lisp :tangle yes 
  (use-package company
    :config
    (global-company-mode t))

  (use-package yasnippet
    :config
    (yas-global-mode 1))

  (use-package smartparens
    :config
    (require 'smartparens-config)
    (smartparens-global-mode)
    )

  (use-package highlight-parentheses
    :config
    (global-highlight-parentheses-mode t))

  (use-package magit)

  (use-package hungry-delete
    :config
    (global-hungry-delete-mode))

  (use-package exec-path-from-shell
    :config
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize)))

  (use-package projectile
    :config
    (projectile-mode +1)
    (define-key projectile-mode-map (kbd "M-p") 'projectile-command-map))
#+END_SRC
* lang
** c++
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package irony
    :config
    (add-hook 'c++-mode-hook 'irony-mode)
    (add-hook 'c-mode-hook 'irony-mode)
    (add-hook 'objc-mode-hook 'irony-mode)

    (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))

  (use-package clang-format+
    :config
    (add-hook 'c-mode-common-hook #'clang-format+-mode))
#+END_SRC
** python
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package elpy
    :ensure t
    :defer t
    :init
    (advice-add 'python-mode :before 'elpy-enable)
    :config
    (setq python-shell-interpreter "python3"
          python-shell-interpreter-args "-i")
    (setq elpy-rpc-python-command "python3"))


  (use-package yapfify
    :config
    (add-hook 'python-mode-hook 'yapf-mode))
#+END_SRC
** latex
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package tex
    :ensure auctex)

  (add-hook 'LaTeX-mode-hook 
            (lambda()
               (add-to-list 'TeX-command-list '("XeLaTeX" "%`xelatex%(mode)%' %t" TeX-run-TeX nil t))
               (setq TeX-command-default "XeLaTeX")))
#+END_SRC
** misc
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package julia-mode)

  (use-package markdown-mode
    :ensure t
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "multimarkdown"))

  (use-package yaml-mode
    :config
    (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
    (add-hook 'yaml-mode-hook
              '(lambda ()
                 (define-key yaml-mode-map "\C-m" 'newline-and-indent)))
    )
#+END_SRC
* org
** basic
#+BEGIN_SRC emacs-lisp :tangle yes 
  (use-package org-bullets
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

  (with-eval-after-load 'org       
    (setq org-startup-indented t) ; Enable `org-indent-mode' by default
    (add-hook 'org-mode-hook #'visual-line-mode))
#+END_SRC
** exporting
#+BEGIN_SRC emacs-lisp :tangle yes 
  (setq org-latex-pdf-process 
        '("xelatex -interaction nonstopmode %f"
          "xelatex -interaction nonstopmode %f")) ;; for multiple passes
  (use-package htmlize)
  ;; (setq org-html-htmlize-output-type 'inline-css) ;; default
  (setq org-html-htmlize-output-type 'css)
  (setq org-html-postamble nil)

  (setq org-publish-project-alist
        '(("org"
           :base-directory "~/codes/TravellingLight6.github.io/org"
           :base-extension "org"
           :publishing-directory "~/codes/TravellingLight6.github.io"
           :publishing-function org-html-publish-to-html
           :section-numbers nil
           :with-toc nil
           :recursive t
           :html-head "<link rel=\"stylesheet\" type=\"text/css\" href=\"https://gongzhitaao.org/orgcss/org.css\"/>"
           :html-head-extra "<div class=\"topnav\">
           <a href=\"https://travellinglight6.github.io\">HOME</a>
           <a href=\"https://travellinglight6.github.io/blog/\">BLOG</a>
           <a href=\"https://travellinglight6.github.io/doc/\">DOC</a>
           </div>"
           :html-preamble nil)

          ("static"
           :base-directory "~/codes/TravellingLight6.github.io/org"
           :base-extension "jpg\\|gif\\|png"
           :publishing-directory "~/codes/TravellingLight6.github.io"
           :publishing-function org-publish-attachment
           :recursive t)

          ("website" :components ("org" "static"))))
#+END_SRC
** getting things done
#+BEGIN_SRC emacs-lisp :tangle yes
  (global-set-key (kbd "C-c c") 'org-capture)
  (global-set-key (kbd "C-c a") 'org-agenda)

  (setq org-directory "~/org"
        org-agenda-files `("~/org")
        org-default-notes-file (concat org-directory "/notes.org")
        org-default-todo-file (concat org-directory "/todos.org"))

  (setq org-capture-templates
        '(("t" "Todo" entry (file+headline org-default-todo-file "Tasks")
           "* TODO %?\nEntered on %U")
          ("n" "Note" entry (file+headline org-default-notes-file "INBOX")
           "* %?\nEntered on %U")
          ))

  (setq org-todo-keywords
        '((sequence "TODO(t)" "DOING(i)" "|" "DONE(d)")
          (sequence "|" "CANCELED(c)")))
  (setq org-todo-keyword-faces
        '(("TODO" . org-warning) ("DOING" . "yellow") ("DONE" . "green")
          ("CANCELED" . (:foreground "blue" :weight bold))))

  (setq org-refile-targets '((nil :maxlevel . 9)
                             (org-agenda-files :maxlevel . 9)))
  (setq org-outline-path-complete-in-steps nil)         ; Refile in a single go
  (setq org-refile-use-outline-path t)                  ; Show full paths for refiling
#+END_SRC
** noting
#+BEGIN_SRC emacs-lisp :tangle yes
  (use-package deft
    :config
    (setq deft-directory org-directory
          deft-recursive t
          deft-default-extension "org"
          deft-use-filename-as-title t
          deft-extensions '("md" "org"))
    (global-set-key (kbd "C-c d") 'deft)
    (global-set-key (kbd "C-c f") 'deft-find-file)
    )
#+END_SRC
* customization
#+BEGIN_SRC emacs-lisp :tangle yes
  (defun ql/reload-config ()
    (interactive)
    (org-babel-load-file "~/.emacs.d/config.org"))
#+END_SRC
